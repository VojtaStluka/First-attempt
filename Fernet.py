from cryptography.fernet import Fernet
import base64

f = open("tree.png","rb")
data=f.read()
b64_data=base64.b64encode(data)
print("Base64:",b64_data.decode())

data=b"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"
b64=base64.b64decode(data)
print(b64)
vystup=bytearray()
for b in b64:
    vystup.append(b)
soubor=open("output.jpeg","wb")
soubor.write(vystup)
soubor.close()

#Fernet
key="-fK45XOTjLJ-fG97_G16j6dz2_3BYJKqGHk8pfAnkF8="
message="dnes se učíme šifrovat".encode()
fernet=Fernet(key)
encrypted_message=fernet.encrypt(message)
print(encrypted_message)
decrypted=fernet.decrypt(encrypted_message)
print(decrypted.decode())
